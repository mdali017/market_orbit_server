generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String?
  email     String     @unique
  password  String
  role      UserRole
  Admins    Admins?
  Vendors   Vendors?
  Customers Customers?
  Review    Review[]
  Shop      Shop?
}

model Admins {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Vendors {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Customers {
  id           String         @id @default(uuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id])
  FollowedShop FollowedShop[]
}

model Shop {
  id           String         @id @default(uuid())
  name         String
  logo         String?
  description  String
  userId       String         @unique
  vendor       User           @relation(fields: [userId], references: [id])
  product      Product[]
  followedShop FollowedShop[]
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Product {
  id               String             @id @default(uuid())
  name             String
  price            Float
  inventoryCount   Int                @default(0)
  images           String[]           @default([])
  discounts        Float?
  ratings          Float?
  reviews          Review[]
  categoryId       String
  category         ProductCategory    @relation(fields: [categoryId], references: [id])
  shopId           String
  shop             Shop               @relation(fields: [shopId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  flashSaleProduct FlashSaleProduct[]
}

model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      @default(0) // Rating out of 5
  comment   String?
  createdAt DateTime @default(now())
}

model FollowedShop {
  id         String    @id @default(uuid())
  customerId String
  shopId     String
  customer   Customers @relation(fields: [customerId], references: [id])
  shop       Shop      @relation(fields: [shopId], references: [id])
  createdAt  DateTime  @default(now())
}

model FlashSale {
  id          String             @id @default(uuid())
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime
  products    FlashSaleProduct[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model FlashSaleProduct {
  id          String    @id @default(uuid())
  flashSaleId String
  flashSale   FlashSale @relation(fields: [flashSaleId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount    Float // Percentage discount for the product in the flash sale
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}
